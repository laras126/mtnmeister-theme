
// ---
// Cusomized Bootstrap Scaffolding Mixins
// ---


// ---
//
// Changes made by Lara:
// - Added "@if $gutter != 0" conditional to prevent overriding gutter padding
// - Changed pixel values to values defined in _settings.scss
// - Moved all styles into MQ
// ---




//== Grid system
//
//## Define your custom responsive grid.

//** Number of columns in the grid.
$grid-columns:              12 !default;

$grid-gutter-width:         $h3 !default;
$gutter:                    $h3;




// ----
// Containers
// ---

// Wrapper to contain internal columns.
// The negative margin accounts for the extra padding from nested columns


@mixin container($size) {
    margin: 0 auto;
    width: 90%;
    
    @include bp(med) {
      max-width: $size;
    }
    
    @include clearfix;
}

// To contain a primary section of content. 
// Max width of the widest inner wrap (below).

.contain-sm,
.container-squish {
    @include container($screen-sm);
}

.contain-md,
.contain,
.container {
    @include container($screen-md);
}

.contain-lg,
.container-stretch {
    @include container($screen-lg);
}



// ----
// Rows
// ----
// For wrapping nested columns

// TODO: incorporate clearfix into mixin instead of in each class.

@mixin make-row($gutter: $gutter, $margin: true) {
    @if $margin == true {
        margin-left:  ($gutter / -2);
        margin-right: ($gutter / -2);      
    }
}

.row {
    @include clearfix();
    @include make-row();
}

.row-sm {
    @include clearfix;
    @include bp(small) {
        @include make-row();  
    }
}

.row-md {
    @include clearfix();
    @include bp(med) {
        @include make-row();   
    }
}

.row-lg {
    @include clearfix();
    @include bp(large) {
        @include make-row();   
    }
}





// ----
// Grid Mixins
// ---


// Conditionally print the gutter

@mixin bs-gutter($gutter, $pos: true) {
    @if $pos == true {
        float: left;
        position: relative;
    }
    @if $gutter != false {
        padding-left:  ($gutter / 2);
        padding-right: ($gutter / 2);
    }
}




// Extra Small

@mixin make-xs-column($columns, $gutter: $gutter, $pos: true) {
  @include bs-gutter($gutter, $pos);
  
  width: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-offset($columns, $side: left) {
  margin-#{$side}: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-push($columns) {
  left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-pull($columns) {
  right: percentage(($columns / $grid-columns));
}



// Small

@mixin make-sm-column($columns, $gutter: $gutter, $pos: true) {
  @media (min-width: $screen-sm) {
    @include bs-gutter($gutter, $pos);
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-offset($columns, $side: left) {
  @media (min-width: $screen-sm) {
    margin-#{$side}: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-push($columns) {
  @media (min-width: $screen-sm) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-pull($columns) {
  @media (min-width: $screen-sm) {
    right: percentage(($columns / $grid-columns));
  }
}



// Rouge grid mixin for Meisters page grid

@mixin make-smmed-column($columns, $gutter: $gutter, $pos: true) {
  @media (min-width: 520px) {
    @include bs-gutter($gutter, $pos);
    width: percentage(($columns / $grid-columns));
  }
}



// Medium

@mixin make-md-column($columns, $gutter: $gutter, $pos: true) {
  @media (min-width: $screen-md) {
    @include bs-gutter($gutter, $pos);
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-offset($columns, $side: left) {
  @media (min-width: $screen-md) {
    margin-#{$side}: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-push($columns) {
  @media (min-width: $screen-md) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-pull($columns) {
  @media (min-width: $screen-md) {
    right: percentage(($columns / $grid-columns));
  }
}


// Large

@mixin make-lg-column($columns, $gutter: $gutter, $pos: true) {
  @media (min-width: $screen-lg) {
    @include bs-gutter($gutter, $pos);
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-offset($columns, $side: left) {
  @media (min-width: $screen-lg) {
    margin-#{$side}: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-push($columns) {
  @media (min-width: $screen-lg) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-pull($columns) {
  @media (min-width: $screen-lg) {
    right: percentage(($columns / $grid-columns));
  }
}




// Large

@mixin make-xl-column($columns, $gutter: $gutter, $pos: true) {
  @media (min-width: $screen-xl) {
    @include bs-gutter($gutter, $pos);
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-xl-column-offset($columns, $side: left) {
  @media (min-width: $screen-xl) {
    margin-#{$side}: percentage(($columns / $grid-columns));
  }
}
@mixin make-xl-column-push($columns) {
  @media (min-width: $screen-xl) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-xl-column-pull($columns) {
  @media (min-width: $screen-xl) {
    right: percentage(($columns / $grid-columns));
  }
}






// ----
// Generate Utility Classes
// ----

$placeholder-loop: 13;

@for $i from 1 to $placeholder-loop {
    .col-xs-#{$i} { @include make-xs-column($i); }
    .col-xs-#{$i}-np { @include make-xs-column($i, false); }

}
@for $i from 1 to $placeholder-loop {
    .col-sm-#{$i} { @include make-sm-column($i); }
    .col-sm-#{$i}-np { @include make-sm-column($i, false); }
}
@for $i from 1 to $placeholder-loop {
    .col-md-#{$i} { @include make-md-column($i); }
    .col-md-#{$i}-np { @include make-md-column($i, false); }
}
@for $i from 1 to $placeholder-loop {
    .col-lg-#{$i} { @include make-lg-column($i); }
    .col-lg-#{$i}-np { @include make-lg-column($i, false); }
}

@for $i from 1 to $placeholder-loop {
    .col-xl-#{$i} { @include make-lg-column($i); }
    .col-xl-#{$i}-np { @include make-lg-column($i, false); }
}
